# One-YOLOv5 Continuous Integration (CI) GitHub Actions tests

name: One-YOLOv5 CI

env:
  ONEFLOW_SRC: oneflow-src
on:
  pull_request:
    types: [review_requested]
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      placeholder:
        description: "placeholder, no effect"
        required: false

jobs:
  # Benchmarks:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ ubuntu-latest ]
  #       python-version: [ '3.8' ]  # requires python<=3.9
  #       model: [ yolov5n ]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
     
  #     - name: Install requirements
  #       run: |
  #         python -m pip install --upgrade pip wheel 
  #         pip install -r requirements.txt 
  #         python --version
  #         pip --version
  #         pip list
      # - name: Benchmark DetectionModel
      #   run: |
      #     python benchmarks.py --data coco128.yaml --weights ${{ matrix.model }}.of --img 320 --hard-fail 0.29
      # - name: Benchmark SegmentationModel
      #   run: |
      #     python benchmarks.py --data coco128-seg.yaml --weights ${{ matrix.model }}-seg.of --img 320 --hard-fail 0.22
      # - name: Test predictions
      #   run: |
      #     python export.py --weights ${{ matrix.model }}-cls.of --include onnx --img 224
      #     python detect.py --weights ${{ matrix.model }}.onnx --img 320
      #     python segment/predict.py --weights ${{ matrix.model }}-seg.onnx --img 320
      #     python classify/predict.py --weights ${{ matrix.model }}-cls.onnx --img 224

  Tests:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]  # macos-latest bug https://github.com/ultralytics/yolov5/pull/9049
        python-version: [ '3.8' ]
        model: [ yolov5n ]
        include:
          # - os: ubuntu-latest
          #   python-version: '3.7'  # '3.6.8' min
          #   model: yolov5n
          # - os: ubuntu-latest
          #   python-version: '3.8'
          #   model: yolov5n
          # - os: ubuntu-latest
          #   python-version: '3.9'
          #   model: yolov5n
          - os: ubuntu-latest
            python-version: '3.8'  # torch 1.7.0 requires python >=3.6, <=3.8
            model: yolov5n
            oneflow: '0.9.0'  # min torch version CI https://pypi.org/project/torchvision/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get cache dir
        # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pip-
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt 
          python --version
          pip --version
          pip list
          if [ "${{ matrix.oneflow }}" == "0.9.0" ]; then
              pip install --pre oneflow -f https://staging.oneflow.info/branch/master/cu117
          else
              pip install -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu
          fi
        shell: bash  # for Windows compatibility
      - name: Check environment
        run: |
          python -c "import utils; utils.notebook_init()"
          echo "RUNNER_OS is ${{ runner.os }}"
          echo "GITHUB_EVENT_NAME is ${{ github.event_name }}"
          echo "GITHUB_WORKFLOW is ${{ github.workflow }}"
          echo "GITHUB_ACTOR is ${{ github.actor }}"
          echo "GITHUB_REPOSITORY is ${{ github.repository }}"
          echo "GITHUB_REPOSITORY_OWNER is ${{ github.repository_owner }}"
          python --version
          pip --version
          pip list
      - name: Test detection
        shell: bash  # for Windows compatibility
        run: |
          # export PYTHONPATH="$PWD"  # to run '$ python *.py' files in subdirectories
          m=${{ matrix.model }}  # official weights
          b=runs/train/exp/weights/best  # best.of checkpoint
          python train.py --imgsz 64 --batch 32 --weights $m.of --cfg $m.yaml --epochs 1 --device cpu  # train
          for d in cpu; do  # devices
            for w in $m $b; do  # weights
              python val.py --imgsz 64 --batch 32 --weights $w.of --device $d  # val
              python detect.py --imgsz 64 --weights $w.of --device $d  # detect
            done
          done
          python hubconf.py --model $m  # hub
          # python models/tf.py --weights $m.of  # build TF model
          python models/yolo.py --cfg $m.yaml  # build OneFlow model
          python export.py --weights $m.of --img 64 --include onnx  # export
          python - <<EOF
          import oneflow as torch 
          im = torch.zeros([1, 3, 64, 64])
          for path in '$m', '$b':
              model = torch.hub.load('.', 'custom', path=path, source='local')
              print(model('data/images/bus.jpg'))
              model(im)  # warmup, build grids for trace
              # torch.jit.trace(model, [im])
          EOF
      - name: Test segmentation
        shell: bash  # for Windows compatibility
        run: |
          m=${{ matrix.model }}-seg  # official weights
          b=runs/train-seg/exp/weights/best  # best.of checkpoint
          python segment/train.py --imgsz 64 --batch 32 --weights $m.of --cfg $m.yaml --epochs 1 --device cpu  # train
          python segment/train.py --imgsz 64 --batch 32 --weights '' --cfg $m.yaml --epochs 1 --device cpu  # train
          for d in cpu; do  # devices
            for w in $m $b; do  # weights
              python segment/val.py --imgsz 64 --batch 32 --weights $w.of --device $d  # val
              python segment/predict.py --imgsz 64 --weights $w.of --device $d  # predict
              python export.py --weights $w.of --img 64 --include onnx --device $d  # export
            done
          done
      - name: Test classification
        shell: bash  # for Windows compatibility
        run: |
          m=${{ matrix.model }}-cls.of  # official weights
          b=runs/train-cls/exp/weights/best.of  # best.of checkpoint
          python classify/train.py --imgsz 32 --model $m --data mnist160 --epochs 1  # train
          python classify/val.py --imgsz 32 --weights $b --data ../datasets/mnist160  # val
          python classify/predict.py --imgsz 32 --weights $b --source ../datasets/mnist160/test/7/60.png  # predict
          python classify/predict.py --imgsz 32 --weights $m --source data/images/bus.jpg  # predict
          python export.py --weights $b --img 64 --include onnx  # export
          python - <<EOF
          import oneflow as torch
          for path in '$m', '$b':
              model = torch.hub.load('.', 'custom', path=path, source='local')
          EOF
